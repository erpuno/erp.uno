<!DOCTYPE html><html><head><meta charset="utf-8" /><meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="description" content="" /><meta name="author" content="Namdak Tonpa" /><title>2019-07-01</title><link rel="stylesheet" href="https://n2o.dev/blank.css?v=2" /></head><body><nav>
    <a href="../../index.html">PLM</a>
    <div class="dropdown">
       <a onclick="dropChap()" class="dropbtn">Частина 2</a>
    <div id="dropdownCHAPTER" class="dropdown-content">
       <a href="1.htm">Частина 1</a>
       <a href="2.htm" style="background:#ededed;">Частина 2</a>
       <a href="3.htm">Частина 3</a>
       <a href="4.htm">Частина 4</a>
       <a href="5.htm">Частина 5</a>
       <a href="6.htm">Частина 6</a>
       <a href="7.htm">Частина 7</a>
     </div>
     </div>
    <div class="dropdownLANG">
       <a onclick="dropLang()" class="dropbtn"  >UA</a>
    <div id="dropdownLANG" class="dropdown-content">
       <a href="../ua/2.htm" style="background:#ededed;">UA</a>
       <a href="../bg/2.htm">BG</a>
       <a href="../ru/2.htm">RU</a>
     </div>
     </div>
</nav><header>
</header><main>
    <section>
        <h3>Частина 2. Загальна структура</h3>

        <p>У цій статті я розповім, з чого складається модуль підприємства.</p>

    </section>
    <section>

        <p>Якщо розглядати первинну гранулярність підприємства, яке
           в першому наближенні складається з модулів, то уже на прикладі PLM
           ми можемо виявити повну структуру типового модуля, кожен елемент
           якої представлений в екземплярі PLM.</p>

        <h3>Конфігурація</h3>

        <p>Перший і головний компонент додатка — файл конфігурації
           (для Erlang — <b>sys.config</b>, для Elixir — <b>consig.exs</b>),
           який потрібен для багатьох додатків-залежностей:
           <b>n2o</b>, <b>kvs</b>, <b>erp</b>, <b>form</b>.
           Це обов'язковий компонент будь-якого ерланг додатка, який
           потребує ці залежності.</p>

        <p>Більш детально про конфігурацію Erlang і Elixir додатків можна почитати тут:</p>

        <p>— <a href="https://erlang.org">Erlang</a><br />
           — <a href="https://elixir-lang.org">Elixir</a></p>

        <h3>Публикація</h3>

        <p>Для побудова релізу, звичайного запуску або публікації в hex.pm
           за допомогою <b>mad</b>, <b>mix</b> чи <b>rebar3</b>,
           вам необхідний файл публікації (для Erlang — <b>rebar.config</b>,
           для Elixir — <b>mix.exs</b>). Файл публікації містить план запуску додатків.</p>

        <p>Більш докладно про публікацію Erlang і Elixir додатків можна почитати тут:</p>

        <p>— <a href="https://mad.n2o.space">mad</a> (Erlang)<br />
           — <a href="https://www.rebar3.org">rebar3</a> (Erlang)<br />
           — <a href="https://elixir-lang.org/getting-started/mix-otp/introduction-to-mix.html">mix</a> (Elixir)</p>

        <h3>Типові специфікації</h3>

        <p>Типова специфікація — це сукупність визначень типів (type),
           записів (record) та специфікацій функцій (spec). Це информація для діалайзера,
           який допомагає визначити невідповідність коду цим специфікаціям. Всі системи
           збірки підтримують перевірку dialyzer.</p>

        <p>У типових специфікаціях ми зберігаємо внутрішні структури
           фреймворків і додатків, а також бізнес-об'єктів підприємства.
           Мова опису бізнес об'єктів підтримує кортежі (для повідомлень),
           суми (для протоколів), скалярні і векторні типи (для полів).</p>

        <p>Типові специфікації зберігаються в HRL файлах, в папці <b>include</b>.
           Тут повинні бути всі -spec, -record, -type визначення. В Elixir
           імпортуйте їх за допомогою <b>Record.extract</b>.</p>

        <p>Якщо програма не містить include папки (наприклад, як PLM модуль),
           то це означає, що модуль не визначає ніяких додаткових типів,
           а користується типами своїх залежностей, або не користується ними взагалі.</p>

        <p>Більш докладно про типові специфікації та підтримувані мови програмування
           можна почитати тут:</p>

        <p>— <a href="https://bert.n2o.space">bert</a></p>

        <h3>Протоколи</h3>

        <p>Якщо додаток реалізує якийсь протокол, цей протокол вбудовується
           в протокольні цикли n2o_mqtt, n2o_ws, n2o_tcp розподіленого кільця воркерів,
           які обслуговують запити клієнтських додатків.</p>

        <p>Список протоколів визначається у змінній protocols бібліотеки N2O:</p>

        <figure><code>
  protocols:
  [
    :n2o_heart,
    :n2o_nitro,
    :n2o_ftp,
    :bpe_n2o,
    CHAT.TXT
  ]
        </code></figure>

        <p>А список воркерів, які реалізують ці протоколи — на ендпоінтах:</p>

        <figure><code>
  mqtt_services: ['erp', 'plm'],
  ws_services: ['chat'],
        </code></figure>

        <p>Протоколи, якщо вони реалізовані додатком,
           знаходяться в папках <b>src/protos</b> і <b>lib/protos</b>
           для Erlang і Elixir відповідно.</p>

        <p>Більш докладно про N2O протоколи та їх використання
           можно почитати тут:</p>

        <p>— <a href="https://ws.n2o.space">n2o</a></p>

        <h3>Ланцюжки</h3>

        <p>Все типізовані типовими специфікаціями дані зберігаються в KVS сховищі.
           Це Erlang-орієнтована абстракція над
           записами/кортежами (records, tuples, C-structures), яка
           дозволяє приховувати за єдиним інтерфейсом декілька KV сховищ (включаючи
           Mnesia, RocksDB, Cassandra).</p>

        <h4>Кортежі і їх ланцюжки</h4>

        <p>В основі KVS лежать поняття кортежа і ланцюжка. Типи кортежів визначаються
           в типових специфікаціях, а ланцюжки — це послідовності кортежів,
           в загальному випадку будь-яких типів, таким чином можна говорити про гетерогенні та гомогенні ланцюжки.</p>

        <p>Кожен ланцюжок індексується своїм ідентифікатором, який представляє
           собою сегментований шлях в ієрархічній віртуальній файловій системі.
           Це зроблено для того, щоб префіксним пошуком можна було вибрати всіх
           дітей певної субгілки в ієрархії ідентифікаторів ланцюжків. Всі ідентифікатори
           всіх ланцюжків також знаходяться в ланцюжку.</p>

        <h4>Схеми</h4>

        <p>Кожен модуль підприємства може включати одну чи багато схем.
           Схема — це сукупність типових специфікацій, іншими словами — певний набір
           кортежів і їх типів, як форма дистрибуції
           типової специфікації.</p>

        <h4>Первинні кореневі ланцюжки</h4>

        <p>Щоб не створювати руками всі базові словники і основні організаційні структури,
           зручно винести їх в так звані завантажувальні модулі. Ці записи автоматично
           створюються при холодному старті додатку <b>ERP</b>. Кореневим первинним ланцюжкам
           присвячені одразу дві наступні частини:
           Частина 3. Створення первинних ланцюжків, де розповідається, як створювати організаційну
           структуру підприємства у вигляді завантажувальних модулів первинних кореневих ланцюжків. і
           Частина 4. Створення адміністратора даних, де розповідається, як створити
           універсальний переглядач ланцюжків у вигляді окремого модуля підприємства.</p>

        <p>Більш докладно про систему зберігання KVS та управління типовими специфікаціями
            можна почитати тут:</p>

        <p>— <a href="https://kvs.n2o.space">kvs</a></p>

        <h3>Процеси</h3>

        <p>Якщо всі дані інформаційної системи підприємства зберігаються в ланцюжках,
           то еволюція цих даних відбувається за допомогою бізнес-процесів.
           Бізнес-процеси покликані вирішити певні проблеми, пов'язані
           з масштабуванням бізнес-логіки на виробництві, тому ця частина
           підприємства добре стандартизована з 2008 року, з появою більш-менш
           універсального стандарту BPMN, який частково підтримується системою
           управління процесами BPE.</p>

        <p>У загальному випадку бізнес процеси (БП) - це графові уявлення алгоритму з іменами переходів,
           станів і асоційованих функцій. Всі бізнес-модулі підприємства реалізують
           якийсь головний БП, і серію допоміжних процесів. Покликанням БП є вирішення проблеми
           ізоляції розподіленої транзакції у вигляді окремого процесу віртуальної машини.
           Цей БП являє собою звичайну функцію <b>action/2</b>, аргументами якої
           є ідентифікатори ланцюжків. У якості ефектів цей БП генерує дані
           в інших ланцюжках, реалізуючи таким чином обчислювальну модель обчислення процесів.</p>

        <p>Наприклад, БП "Рахунок в Банку" є циклічним рекурентним процесом,
           який виходить з, і входить в один і той же стан (моноїд). В якості аргумента
           у цієї функції, що складається з однієї умови, є тільки скалярна
           величина — бізнес об'єкт "Транзакція". Таким чином, трейс цього
           процесу — ланцюжок транзакцій. Операція переказу грошей в такій моделі
           означатиме розподілену транзакцію між усіма учасниками переказу,
           контрольовану окремим процесом.</p>

        <p>У системі, яку розглядаємо, модуль PLM включає три процеси:
           1) Процес "Рахунок в Банку" фінансового модуля FIN;
           2) Процес "Продукт" модуля PLM;
           3) Процес "Пре-Продукт" модуля PLM.
           В Частині 5. Адміністратор процесів показано, як створити адміністратора процесів
           для модуля BPE, призначеного для ознайомлення з системою, а також для
           примітивного ручного тестування.</p>

        <p>Більш докладно про систему управління бізнес-процесами BPE та її використання
           можна почитати тут:</p>

        <p>— <a href="https://bpe.n2o.space">bpe</a></p>

        <h3>Сторінки</h3>
        <h3>Редактори</h3>

        <figure><img src="../images/15.png" /></figure>

        <h3>Вектори</h3>
        <h3>Роутери</h3>

        <p>Більш докладно про веб-фреймворк NITRO
           можна почитати тут:</p>

        <p>— <a href="https://nitro.n2o.space">nitro</a></p>

    </section>
</main><footer>Namdak Tonpa <span class="heart">&#160;❤&#160;</span> 2009—2019</footer>
<script type="text/javascript" src="https://n2o.dev/drop.js"></script>
</body>
</html>
