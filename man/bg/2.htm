<!DOCTYPE html>
<html><head>
<meta charset="utf-8"><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="description" content="">
<meta name="author" content="Radostin Dimitrov">
<title>2019-07-01</title>
<link rel="stylesheet" href="https://n2o.dev/blank.css?v=2"></head>
<body><nav>
    <a href="../../index.html">PLM</a>
    <div class="dropdown">
       <a onclick="dropChap()" class="dropbtn">Част 2</a>
    <div id="dropdownCHAPTER" class="dropdown-content">
       <a href="1.htm">Част 1</a>
       <a href="2.htm" style="background:#ededed;">Част 2</a>
       <a href="3.htm">Част 3</a>
       <a href="4.htm">Част 4</a>
       <a href="5.htm">Част 5</a>
       <a href="6.htm">Част 6</a>
       <a href="7.htm">Част 7</a>
     </div>
     </div>
    <div class="dropdownLANG">
       <a onclick="dropLang()" class="dropbtn"  >BG</a>
    <div id="dropdownLANG" class="dropdown-content">
       <a href="../ua/2.htm">UA</a>
       <a href="../bg/2.htm" style="background:#ededed;">BG</a>
       <a href="../ru/2.htm">RU</a>
     </div>
     </div>
</nav>
<header>
</header><main>
    <section>
        <h3>Част 2. Обща структура</h3>

        <p>В тази статия ще разкажа от какво се състои модулът на предприятието.</p>

    </section>
    <section>

        <p>Ако вземем предвид основната детайлност на предприятието, която в
        първоначалното си структуриране се състои от модули,тогава вече чрез
        примера на PLM можем да намерим пълната структура на типичен модул,
        всеки елемент от който е представен в PLM инстанция.</p>

        <h3>Конфигурация</h3>

          <p>Първият и основен компонент на приложението е конфигурационният
          файл (за Erlang - <b>sys.config</b>, за Elixir - <b>consig.exs</b>), който е
          необходим при определянето на зависимостите за всяко приложения: <b>n2o,
          kvs, erp, form</b>. Това е задължителен компонент на всяко приложение на
          Erlang, което се нуждае от тези зависимости.</p>


        <p>Можете да прочетете повече за конфигурацията на приложенията Erlang и Elixir тук:</p>

        <p>— <a href="https://erlang.org/">Erlang</a><br>
           — <a href="https://elixir-lang.org/">Elixir</a></p>

        <h3>Публикация/Издание (Релииз)</h3>

        <p>За да изградите, стартирате или публикувате издание в <b>hex.pm</b>, 
        може да използва един то инстументите за изграждане на проложения
        <b>mad</b>, <b>mix</b> или <b>rebar3</b>. В зависимост от избраният
        инструмент се гнерира файл (за Erlang и mad тоеа е <b>rebar.config</b>,
        за Elixir - <b>mix.exs</b>) съдържащ инструкции за това как приложението
        да бъде стартиране или пакетирано като релииз.</p>

        <p>Можете да прочетете повече за публикуването на приложения за Erlang и Elixir тук:</p>

        <p>— <a href="https://mad.n2o.space/">mad</a> (Erlang)<br>
           — <a href="https://www.rebar3.org/">rebar3</a> (Erlang)<br>
           — <a href="https://elixir-lang.org/getting-started/mix-otp/introduction-to-mix.html">mix</a> (Elixir)</p>

        <h3>Типични спецификации</h3>

        <p>Типична спецификация е съвкупност от дефиниции на типове (type), запис
        (record) и спецификация на функциите (spec). Dialyser е инструмент за валидиране
        на тези специфинации, като неговата задача е да идентифицира несъответствие на
        кода и тези спецификации. Всички системи за изграждане, поддържат свой
        инструмент за валидиране на тези специфинации.</p>

        <p>В типичните спецификации съхраняваме вътрешните рамкови структури и
        приложения, както и бизнес обектите на предприятието. За описанието на 
        бизнес обекти Езикът поддържа кортежи, суми, скалари и векторни
        типове.</p>

        <p>Типичните спецификации се съхраняват в HRL файлове, в папката
        <b>include</b>. За да бъде възможно най-валидна, тя трябва да има
        дефинирани всички -spec, -record, -type определения. Импортирайте ги с
        Record.extract в Elixir.</p>

        <p>Ако програмата не съдържа папки <b>include</b> (например като PLM
        модул-a), тогава това означава, че модулът не дефинира никакви допълнителни
        типове, но това не означава, че не използва външно дефинирани такива.</p>

        <p>Можете да прочетете повече за стандартните спецификации и поддържаните езици за програми тук:</p>

        <p>— <a href="https://bert.n2o.space/">bert</a></p>

        <h3>Протоколи</h3>

        <p>Ако приложението реализира някакъв протокол,то този протокол се
          изгражда в протоколни цикли, n2o_mqtt, n2o_ws, n2o_tcp в разпределен
          кръг от работници, които обслужват заявки от клиентско приложение.</p>

        <p>Списъкът с протоколи е дефиниран в променливата на <b>protocols</b> на библиотеката N2O:</p>

        <figure><code>
  protocols:
  [
    :n2o_heart,
    :n2o_nitro,
    :n2o_ftp,
    :bpe_n2o,
    CHAT.TXT
  ]
        </code></figure>

        <p>И списъкът на работниците, които прилагат тези протоколи, на крайните точки:</p>

        <figure><code>
  mqtt_services: ['erp', 'plm'],
  ws_services: ['chat'],
        </code></figure>

        <p>Складиранто на протоколите, ако са реализирани от приложението, са в
        папките <b>src/protos</b> и <b>lib/protos</b> за Erlang и Elixir,
        съответно.</p>

        <p>Можете да прочетете повече за N2O протоколите и тяхното използване тук:</p>

        <p>— <a href="https://ws.n2o.space/">n2o</a></p>

        <h3>Вериги</h3>

        <p>Всички данни от стандартната спецификация се съхраняват в хранилището
        на KVS. Това е ориентирана към Ерланг абстракция върху записи/кортежи
        (records, tuples, C-structures), което ви позволява да скриете множество
        KV хранилища зад един интерфейс (включително Mnesia, RocksDB,
        Cassandra).</p>

        <h4>Кортежи(тюпъл) и техните вериги</h4>

        <p>В основата на KVS са концепциите за тюпъл (кортежи) и верига.
        Видовете тюпли са дефинирани в стандартните спецификации, а веригите са
        последователности от тюпли, като цяло от всякакъв тип, като по този
        начин може да мислите за тях като хетерогенни и хомогенни вериги.</p>

        <p> Всяка верига е индексирана от своя идентификатор, който представлява
        сегментиран йерархичната път във виртуална файлова система. Това е за да
        позволи на префиксираните търсения да избират всички деца от определен
        подраздел в йерархията на идентификатора на веригата. Като част от
        вериката са и всички идентификатори на всички вериги. </p>

        <h4>Схеми</h4>

        <p>Всеки корпоративен модул може да включва една или повече схеми. Схема
        е съвкупност от стандартни спецификации, с други думи набор от кортежи и
        техните типове, като форма на разпространение на стандартна
        спецификация.</p>

        <h4>Първични коренни вериги</h4>

        <p>За да не създавате на ръка всички основни речници и основни
        организационни структури, е удобно да ги въведете в така наречените
        стартиращи модули. Тези записи се създават автоматично, когато
        <b>ERP</b> приложението се стартира студено. Към основните първични
        вериги има две части: Част 3. Създаване на първични вериги, която описва
        как да се създаде организационната структура на предприятието под
        формата на зареждащи модули на първични коренни вериги. и част 4.
        Създаване на администратор на данни, който да ви каже как да създадете
        универсален верижен браузър като отделен корпоративен модул.</p>

        <p>Можете да прочетете повече за KVS и управление на спецификациите на модела тук:</p>

        <p>— <a href="https://kvs.n2o.space/">kvs</a></p>

        <h3>Процеси</h3>

        <p>Ако цялата информация на корпоративната информационна система се
        съхранява във вериги, тогава развитието на тези данни става чрез бизнес
        процеси. Бизнес процесите са предназначени да решат определени проблеми,
        свързани с мащабирането на бизнес логиката в производството, така че
        тази част от предприятието е добре стандартизирана от 2008 г. насам, с
        появата на повече или по-малко универсален стандарт BPMN, който частично
        се поддържа от системата за управление на процесите BPE.</p>

        <p>По принцип бизнес процесите (BP) са графични представяния на алгоритъм с
        имена на преходи, състояния и свързани функции. Всички бизнес модули на
        предприятието внедряват някои основни BP и серия от спомагателни
        процеси. Призивът на BP е да реши проблема с изолирането на разпределената
        транзакция като отделен процес на виртуална машина. Този BP е нормална функция
        <b>action/2</b> чиито аргументи са идентификаторите на веригата. Като ефект, този
        BP генерира данни в други вериги, по този начин се прилага изчислителен модел на
        изчисление на процесите.</p>

        <p>Например BP -> „Сметка в банката“ е цикличен/рекурсивен процес, който
        излиза и влиза в същото състояние (моноид). Като аргумент тази функция,
        която се състои от едно условие, само скаларна стойност - бизнес обект
        „Транзакция“. Следователно, следата на този процес е веригата на
        транзакциите (exp: [t1,t2,t3,t4,..], t &#8714; T :: „Транзакция“).
        Операция за превод на пари в такъв модел биозначавала разпределена
        транзакция между всички участници втранзакцията, контролирана от
        определен процес.</p>

        <p>В разглежданата система PLM включва три процеса:
           <b>1)</b> Процес „Сметка в банката“ на финансовия модул FIN;
           <b>2)</b> Процес "Продукт" на PLM модула;
           <b>3)</b> Процес "Пре-Продукт" на модул PLM.
            В Част 5. Администраторът на процеси ви показва как да създадете
            администратор на процес за BPE модул и същевременно да се запознаване
            със системата,както се дава и възможност и за примитивно ръчно
            тестване.</p>

        <p>Можете да прочетете повече за BPE системата за управление на бизнес процесите и нейното използване тук:</p>

        <p>— <a href="https://bpe.n2o.space/">bpe</a></p>

        <h3>Страници</h3>
        <h3>Редактори</h3>

        <figure><img src="../images/15.png"></figure>

        <h3>Вектори</h3>
        <h3>Маршрутизатори</h3>

        <p>Можете да прочетете повече за уеб рамката на NITRO тук:</p>

        <p>— <a href="https://nitro.n2o.space/">nitro</a></p>

    </section>
</main><footer>Namdak Tonpa <span class="heart">&nbsp;❤&nbsp;</span> 2009—2019</footer>
<script type="text/javascript" src="https://n2o.dev/drop.js"></script>
</body>
</html>
